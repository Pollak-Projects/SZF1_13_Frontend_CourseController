// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, BIG BLACK NIGGER DICK or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Run locally:
// npx prisma init
// prisma migrate dev --name init

// To update schema:
// prisma migrate dev
// npx prisma generate

// TODO Make naming more concise, this will be painful
// Putting everything on delete cascasde might be a bad idea lol
generator client {
  provider = "prisma-client-js"
}

// Im definitly not gonna use mysql
datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

model User {
  Id              String           @id @default(uuid())
  Username        String
  HashedPwd       String // won't be hashed for now
  Displayed_name  String
  Created_at      DateTime         @default(now())
  Updated_at      DateTime         @updatedAt
  SubjectTeachers SubjectTeacher[]
  UserData        UserData[]
  TeacherInfo     TeacherInfo[]
}

model UserData {
  UserId String @id @default(uuid())
  User   User   @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  Email     String?
  BirthDate DateTime
}

model Subject {
  Id       String @id @default(uuid())
  Name     String
  Category String
  Evf      String

  TopicId String

  TopicInfo       Topic?           @relation(fields: [TopicId], references: [Id], onDelete: Cascade)
  SubjectInfo     SubjectInfo[]
  SubjectContent  SubjectContent[]
  SubjectTeachers SubjectTeacher[]

  Grade        String
  Description  String
  CreatedAt    DateTime   @default(now())
  UpdatedAt    DateTime   @updatedAt
  CategoryId   String
  ProfessionId String
  Profession   Profession @relation(fields: [ProfessionId], references: [Id])
}

model SubjectInfo {
  SubjectId String
  TeacherId String

  Subject Subject @relation(fields: [SubjectId], references: [Id], onDelete: Cascade)
  Teacher Teacher @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)

  @@id([TeacherId, SubjectId])
}

model SubjectContent {
  SubjectId String

  Subject Subject @relation(fields: [SubjectId], references: [Id], onDelete: Cascade)

  Exercise String
  Content  String

  @@id([SubjectId])
}

model Teacher {
  Id   String @id @default(uuid())
  Name String

  SubjectInfo    SubjectInfo[]
  TeacherInfo    TeacherInfo[]
  SubjectTeacher SubjectTeacher[]
}

model TeacherInfo {
  TeacherId String
  UserId    String

  Teacher Teacher @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)
  User    User    @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@id([UserId, TeacherId])
}

model Topic {
  Id        String @id @default(uuid())
  TopicName String

  Subjects Subject[]
}

model SubjectTeacher {
  TeacherId String
  SubjectId String

  Teacher Teacher @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)
  Subject Subject @relation(fields: [SubjectId], references: [Id], onDelete: Cascade)
  User    User?   @relation(fields: [userId], references: [Id])
  userId  String?

  @@id([TeacherId, SubjectId])
}

model Profession {
  Id String @id @default(uuid())

  Name String

  Subject Subject[]
}
