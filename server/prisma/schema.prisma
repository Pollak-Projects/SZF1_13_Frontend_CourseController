// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, BIG BLACK NIGGER DICK or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Run locally:
// npx prisma init
// npx prisma migrate dev --name init

// To update schema:
// npx prisma migrate dev
// npx prisma generate

// Putting everything on delete cascasde might be a bad idea lol
generator client {
  provider = "prisma-client-js"
}

// Im definitly not gonna use mysql
datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
}

model User {
  Id         String   @id @default(uuid())
  Username    String
  HashedPwd   String // won't be hashed for now
  DisplayName String
  Created_at DateTime @default(now())
  Updated_at DateTime @updatedAt
  UserData    UserData[]
  TeacherUser TeacherUser[]
}

model UserData {
  UserId String @id @default(uuid())
  User   User   @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  Email     String?
  BirthDate DateTime
}

model Subject {
  Id          String   @id @default(uuid())
  Name        String
  Content     String?
  Grade       String?
  Description String?
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  CategoryId String
  ProfessionId String

  Category   Category?   @relation(fields: [CategoryId], references: [Id], onDelete: Cascade)
  Profession Profession? @relation(fields: [ProfessionId], references: [Id], onDelete: Cascade)

  TeacherSubject TeacherSubject[]
}

model Assignment {
  Id          String   @id @default(uuid())
  Name        String
  Content     String?
  Grade       String?
  Description String?
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  CategoryId   String
  ProfessionId String

  Category   Category?   @relation(fields: [CategoryId], references: [Id], onDelete: Cascade)
  Profession Profession? @relation(fields: [ProfessionId], references: [Id], onDelete: Cascade)

  TeacherAssignment TeacherAssignment[]
}

model TeacherSubject {
  SubjectId String
  TeacherId String

  Subject Subject @relation(fields: [SubjectId], references: [Id], onDelete: Cascade)
  Teacher Teacher @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)

  @@id([TeacherId, SubjectId])
}

model TeacherAssignment {
  AssignmentId String
  TeacherId    String

  Assignment Assignment @relation(fields: [AssignmentId], references: [Id], onDelete: Cascade)
  Teacher    Teacher    @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)

  @@id([TeacherId, AssignmentId])
}

model Teacher {
  Id   String @id @default(uuid())
  Name String

  TeacherSubject    TeacherSubject[]
  TeacherAssignment TeacherAssignment[]
  TeacherUser       TeacherUser[]
}

model TeacherUser {
  TeacherId String
  UserId    String

  Teacher Teacher @relation(fields: [TeacherId], references: [Id], onDelete: Cascade)
  User    User    @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@id([UserId, TeacherId])
}

model Category {
  Id           String @id @default(uuid())
  CategoryName String @unique

  Subjects    Subject[]
  Assignments Assignment[]
}

model Profession {
  Id             String @id @default(uuid())
  ProfessionName String @unique

  Subjects    Subject[]
  Assignments Assignment[]
}
